#!/usr/bin/env python
# -*- coding: utf-8 -*-

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import seaborn as sns
import requests
import json
from datetime import datetime
import time
from typing import Dict, List, Any, Optional, Tuple
import os

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(
    page_title="Previs√£o de Pre√ßos de Im√≥veis",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# URL base da API
API_URL = "http://localhost:8000"

# Fun√ß√£o para fazer requisi√ß√µes √† API
def fazer_requisicao(endpoint, metodo="GET", dados=None, params=None):
    """
    Realiza uma requisi√ß√£o √† API.
    
    Args:
        endpoint: Caminho do endpoint na API
        metodo: M√©todo HTTP (GET, POST, etc)
        dados: Dados para envio (para POST, PUT)
        params: Par√¢metros para query string
        
    Returns:
        Resposta da API ou None em caso de erro
    """
    url = f"{API_URL}{endpoint}"
    
    try:
        if metodo == "GET":
            response = requests.get(url, params=params, timeout=10)
        elif metodo == "POST":
            response = requests.post(url, json=dados, timeout=10)
        else:
            st.error(f"M√©todo HTTP n√£o suportado: {metodo}")
            return None
            
        # Verifica se a requisi√ß√£o foi bem-sucedida
        response.raise_for_status()
        
        return response.json()
    
    except requests.exceptions.ConnectionError:
        st.error("Erro de conex√£o. Verifique se a API est√° rodando.")
    except requests.exceptions.Timeout:
        st.error("Tempo de requisi√ß√£o esgotado. A API pode estar sobrecarregada.")
    except requests.exceptions.HTTPError as e:
        st.error(f"Erro HTTP: {e}")
        try:
            st.error(f"Detalhes: {response.json()}")
        except:
            pass
    except Exception as e:
        st.error(f"Erro ao fazer requisi√ß√£o: {e}")
    
    return None

# Fun√ß√£o para verificar se a API est√° online
def verificar_status_api():
    """Verifica se a API est√° online e retorna informa√ß√µes b√°sicas"""
    try:
        response = fazer_requisicao("/")
        if response:
            return True, response
        return False, None
    except:
        return False, None


# Fun√ß√µes para as diferentes p√°ginas da aplica√ß√£o
def pagina_inicial():
    """P√°gina inicial com informa√ß√µes sobre a aplica√ß√£o"""
    st.title("üè† Sistema de Previs√£o de Pre√ßos de Im√≥veis")
    
    # Verifica status da API
    with st.spinner("Verificando conex√£o com a API..."):
        api_online, info = verificar_status_api()
    
    if not api_online:
        st.error("‚ùå API offline. Por favor, inicie a API para usar este aplicativo.")
        st.info("Comando para iniciar a API: `python main.py`")
        return
    
    st.success("‚úÖ API conectada e funcionando!")
    
    # Obt√©m status detalhado
    status_data = fazer_requisicao("/status")
    
    if status_data:
        # Informa√ß√µes do modelo
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Informa√ß√µes do Modelo")
            model_info = {
                "Modelo treinado": "‚úÖ Sim" if status_data["modelo_carregado"] else "‚ùå N√£o",
                "Modelo salvo em disco": "‚úÖ Sim" if status_data["modelo_salvo"] else "‚ùå N√£o",
                "Features suportadas": ", ".join(status_data["features_suportadas"]),
                "Amostras de treinamento": status_data.get("numero_amostras_treinamento", "N/A")
            }
            st.table(pd.DataFrame(list(model_info.items()), 
                                 columns=["Atributo", "Valor"]))
        
        with col2:
            st.subheader("Estat√≠sticas da API")
            api_stats = status_data["estatisticas_api"]
            
            # Calcula tempo online em formato leg√≠vel
            uptime_segundos = api_stats.get("uptime_seconds", 0)
            horas, resto = divmod(uptime_segundos, 3600)
            minutos, segundos = divmod(resto, 60)
            uptime_formatado = f"{int(horas)}h {int(minutos)}m {int(segundos)}s"
            
            api_metrics = {
                "Total de requisi√ß√µes": api_stats["total_requests"],
                "Requisi√ß√µes com sucesso": api_stats["successful_requests"],
                "Requisi√ß√µes com erro": api_stats["failed_requests"],
                "Tempo online": uptime_formatado
            }
            
            st.table(pd.DataFrame(list(api_metrics.items()), 
                                 columns=["M√©trica", "Valor"]))
        
        # Estat√≠sticas do banco de dados
        st.subheader("Estat√≠sticas do Banco de Dados")
        db_metrics = status_data["metricas_banco_dados"]
        
        col1, col2, col3 = st.columns(3)
        col1.metric("Total de Treinamentos", db_metrics.get("total_treinamentos", 0))
        col2.metric("Total de Previs√µes", db_metrics.get("total_previsoes", 0))
        col3.metric("Total de Dados de Treinamento", db_metrics.get("total_dados_treinamento", 0))
        
        # √öltimo treinamento
        ultimo_treinamento = db_metrics.get("ultimo_treinamento")
        if ultimo_treinamento:
            st.subheader("√öltimo Treinamento")
            
            # Linha do tempo
            data_formatada = datetime.fromisoformat(ultimo_treinamento["timestamp"]).strftime("%d/%m/%Y %H:%M:%S")
            st.write(f"**Data:** {data_formatada}")
            
            # M√©tricas principais
            col1, col2, col3 = st.columns(3)
            col1.metric("R¬≤ Score", f"{ultimo_treinamento['r2_score']:.4f}")
            col2.metric("RMSE", f"{ultimo_treinamento.get('rmse', 'N/A'):.2f}")
            col3.metric("MAE", f"{ultimo_treinamento.get('mae', 'N/A'):.2f}")
            
            # Coeficientes
            if "coeficientes" in ultimo_treinamento:
                st.subheader("Coeficientes do Modelo")
                coefs = ultimo_treinamento["coeficientes"]
                coef_df = pd.DataFrame({
                    "Feature": list(coefs.keys()),
                    "Coeficiente": list(coefs.values())
                })
                
                # Cria gr√°fico de barras para coeficientes
                fig = px.bar(
                    coef_df, 
                    x="Feature", 
                    y="Coeficiente",
                    title="Import√¢ncia das Features no Modelo",
                    color="Coeficiente",
                    color_continuous_scale="RdBu",
                    height=400
                )
                st.plotly_chart(fig, use_container_width=True)
    
    # Explica√ß√£o sobre a aplica√ß√£o
    st.subheader("Sobre este Aplicativo")
    st.markdown("""
    Este aplicativo permite:
    
    1. **Treinar** um modelo de previs√£o de pre√ßos de im√≥veis com seus pr√≥prios dados
    2. **Prever** o pre√ßo de novos im√≥veis
    3. **Visualizar** estat√≠sticas e hist√≥rico de previs√µes
    4. **Analisar** o hist√≥rico de treinamentos e modelos
    
    Utilize o menu lateral para navegar entre as diferentes funcionalidades.
    """)


def pagina_previsao():
    """P√°gina para fazer previs√µes de pre√ßos"""
    st.title("üîÆ Prever Pre√ßo de Im√≥vel")
    
    # Verifica se o modelo est√° treinado
    status_data = fazer_requisicao("/status")
    if not status_data or not status_data.get("modelo_carregado"):
        st.warning("‚ö†Ô∏è O modelo ainda n√£o foi treinado. Por favor, treine o modelo primeiro.")
        if st.button("Ir para p√°gina de treinamento"):
            st.session_state.page = "treinar"
            st.experimental_rerun()
        return
    
    st.markdown("### Informe as caracter√≠sticas do im√≥vel")
    
    # Formul√°rio para entrada de dados
    with st.form(key="previsao_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            area = st.number_input("√Årea (m¬≤)", min_value=1.0, max_value=10000.0, value=100.0, step=10.0)
            quartos = st.number_input("N√∫mero de Quartos", min_value=0, max_value=20, value=2, step=1)
        
        with col2:
            banheiros = st.number_input("N√∫mero de Banheiros", min_value=0, max_value=20, value=1, step=1)
            idade_imovel = st.number_input("Idade do Im√≥vel (anos)", min_value=0, max_value=200, value=5, step=1)
        
        submit_button = st.form_submit_button(label="Prever Pre√ßo")
    
    # Quando o bot√£o √© clicado, faz a previs√£o
    if submit_button:
        with st.spinner("Calculando previs√£o..."):
            # Prepara dados para a requisi√ß√£o
            dados_previsao = {
                "area": area,
                "quartos": quartos,
                "banheiros": banheiros,
                "idade_imovel": idade_imovel
            }
            
            # Faz a requisi√ß√£o √† API
            resultado = fazer_requisicao("/prever", metodo="POST", dados=dados_previsao)
            
            if resultado:
                # Exibe o resultado
                st.success("Previs√£o calculada!")
                
                # Exibe o pre√ßo previsto com formata√ß√£o
                preco = resultado["preco_previsto"]
                faixa_inferior, faixa_superior = resultado["faixa_confianca"]
                
                # Mostra resultado principal
                st.markdown(f"## Pre√ßo Previsto: R$ {preco:,.2f}")
                
                # Informa√ß√µes adicionais
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("Faixa de Pre√ßo")
                    st.markdown(f"**M√≠nimo:** R$ {faixa_inferior:,.2f}")
                    st.markdown(f"**M√°ximo:** R$ {faixa_superior:,.2f}")
                
                with col2:
                    # Informa√ß√µes da previs√£o
                    st.subheader("Detalhes")
                    st.markdown(f"**ID da Requisi√ß√£o:** {resultado['request_id']}")
                    st.markdown(f"**Data/Hora:** {resultado['timestamp']}")
                
                # Visualiza√ß√£o
                fig = go.Figure()
                
                # Adiciona o valor previsto como ponto
                fig.add_trace(go.Scatter(
                    x=[0], 
                    y=[preco],
                    mode='markers',
                    name='Pre√ßo Previsto',
                    marker=dict(size=15, color='green')
                ))
                
                # Adiciona a faixa de confian√ßa como √°rea
                fig.add_trace(go.Scatter(
                    x=[0, 0],
                    y=[faixa_inferior, faixa_superior],
                    mode='lines',
                    name='Faixa de Confian√ßa',
                    line=dict(width=5, color='rgba(0,100,80,0.5)')
                ))
                
                # Configura√ß√µes do layout
                fig.update_layout(
                    title="Previs√£o de Pre√ßo com Faixa de Confian√ßa",
                    xaxis=dict(
                        title="",
                        showticklabels=False
                    ),
                    yaxis=dict(
                        title="Pre√ßo (R$)"
                    ),
                    height=400
                )
                
                st.plotly_chart(fig, use_container_width=True)


def pagina_treinamento():
    """P√°gina para treinar o modelo"""
    st.title("üß† Treinar Modelo")
    
    st.markdown("""
    Nesta p√°gina voc√™ pode treinar o modelo com seus pr√≥prios dados.
    Voc√™ pode fornecer dados manualmente ou usar um conjunto de dados de exemplo.
    """)
    
    # Op√ß√µes de entrada de dados
    input_method = st.radio(
        "Escolha como deseja fornecer os dados:",
        ("Usar dados de exemplo", "Entrada manual", "Upload de CSV")
    )
    
    # Dados de exemplo pr√©-definidos
    if input_method == "Usar dados de exemplo":
        st.info("Estes s√£o dados fict√≠cios para testar o modelo")
        
        # Cria DataFrame de exemplo
        dados_exemplo = pd.DataFrame({
            "area": [70, 90, 120, 150, 180, 200, 250, 300, 85, 100],
            "quartos": [1, 2, 3, 3, 4, 4, 5, 5, 2, 2],
            "banheiros": [1, 1, 2, 2, 3, 3, 4, 4, 1, 1],
            "idade_imovel": [15, 10, 5, 3, 7, 2, 1, 0, 20, 12],
            "preco": [200000, 300000, 400000, 500000, 600000, 700000, 950000, 1100000, 280000, 320000]
        })
        
        st.write(dados_exemplo)
        
        # Bot√£o para treinar com dados de exemplo
        if st.button("Treinar com Dados de Exemplo"):
            with st.spinner("Treinando modelo..."):
                # Prepare dados para a API
                features = []
                for _, row in dados_exemplo.iterrows():
                    features.append({
                        "area": float(row["area"]),
                        "quartos": int(row["quartos"]),
                        "banheiros": int(row["banheiros"]),
                        "idade_imovel": int(row["idade_imovel"])
                    })
                
                dados_treinamento = {
                    "features": features,
                    "precos": dados_exemplo["preco"].tolist()
                }
                
                # Faz a requisi√ß√£o de treinamento
                resultado = fazer_requisicao("/treinar", metodo="POST", dados=dados_treinamento)
                
                if resultado:
                    st.success("‚úÖ Modelo treinado com sucesso!")
                    
                    # Mostra estat√≠sticas
                    col1, col2, col3 = st.columns(3)
                    col1.metric("Amostras", resultado["num_amostras"])
                    col2.metric("R¬≤ Score", f"{resultado['r2_score']:.4f}")
                    col3.metric("RMSE", f"{resultado.get('rmse', 0):.2f}")
                    
                    st.balloons()
    
    # Entrada manual de dados
    elif input_method == "Entrada manual":
        st.markdown("### Digite os dados para treinamento")
        
        # N√∫mero de amostras
        num_samples = st.number_input("N√∫mero de amostras", min_value=3, max_value=50, value=5)
        
        # Cria DataFrame vazio
        if "train_data" not in st.session_state or len(st.session_state.train_data) != num_samples:
            # Inicializa com valores padr√£o
            st.session_state.train_data = pd.DataFrame({
                "area": [100] * num_samples,
                "quartos": [2] * num_samples,
                "banheiros": [1] * num_samples,
                "idade_imovel": [5] * num_samples,
                "preco": [300000] * num_samples
            })
        
        # Interface para editar dados
        st.markdown("#### Edite os valores abaixo:")
        edited_df = st.data_editor(
            st.session_state.train_data,
            num_rows="fixed",
            column_config={
                "area": st.column_config.NumberColumn("√Årea (m¬≤)", min_value=10, max_value=1000, step=10),
                "quartos": st.column_config.NumberColumn("Quartos", min_value=0, max_value=10, step=1),
                "banheiros": st.column_config.NumberColumn("Banheiros", min_value=0, max_value=10, step=1),
                "idade_imovel": st.column_config.NumberColumn("Idade (anos)", min_value=0, max_value=100, step=1),
                "preco": st.column_config.NumberColumn("Pre√ßo (R$)", min_value=50000, max_value=5000000, step=10000, format="R$ %d")
            }
        )
        
        st.session_state.train_data = edited_df
        
        # Bot√£o para treinar com dados manuais
        if st.button("Treinar com Dados Manuais"):
            with st.spinner("Treinando modelo..."):
                # Prepara dados para a API
                features = []
                for _, row in edited_df.iterrows():
                    features.append({
                        "area": float(row["area"]),
                        "quartos": int(row["quartos"]),
                        "banheiros": int(row["banheiros"]),
                        "idade_imovel": int(row["idade_imovel"])
                    })
                
                dados_treinamento = {
                    "features": features,
                    "precos": edited_df["preco"].tolist()
                }
                
                # Faz a requisi√ß√£o de treinamento
                resultado = fazer_requisicao("/treinar", metodo="POST", dados=dados_treinamento)
                
                if resultado:
                    st.success("‚úÖ Modelo treinado com sucesso!")
                    
                    # Mostra estat√≠sticas
                    col1, col2, col3 = st.columns(3)
                    col1.metric("Amostras", resultado["num_amostras"])
                    col2.metric("R¬≤ Score", f"{resultado['r2_score']:.4f}")
                    col3.metric("RMSE", f"{resultado.get('rmse', 0):.2f}")
                    
                    st.balloons()
    
    # Upload de CSV
    else:
        st.markdown("### Fa√ßa upload de um arquivo CSV")
        st.markdown("""
        O arquivo CSV deve conter as colunas:
        - `area` (obrigat√≥ria)
        - `quartos` (opcional)
        - `banheiros` (opcional)
        - `idade_imovel` (opcional)
        - `preco` (obrigat√≥ria)
        """)
        
        uploaded_file = st.file_uploader("Escolha um arquivo CSV", type="csv")
        
        if uploaded_file is not None:
            try:
                # L√™ o arquivo CSV
                data = pd.read_csv(uploaded_file)
                
                # Verifica colunas obrigat√≥rias
                required_cols = ["area", "preco"]
                if not all(col in data.columns for col in required_cols):
                    st.error(f"O CSV deve conter as colunas: {', '.join(required_cols)}")
                else:
                    st.write("Dados carregados:")
                    st.write(data)
                    
                    # Bot√£o para treinar com dados do CSV
                    if st.button("Treinar com Dados do CSV"):
                        with st.spinner("Treinando modelo..."):
                            # Prepara dados para a API
                            features = []
                            for _, row in data.iterrows():
                                feature = {"area": float(row["area"])}
                                
                                # Adiciona colunas opcionais se presentes
                                for col in ["quartos", "banheiros", "idade_imovel"]:
                                    if col in data.columns:
                                        feature[col] = int(row[col]) if not pd.isna(row[col]) else None
                                
                                features.append(feature)
                            
                            dados_treinamento = {
                                "features": features,
                                "precos": data["preco"].tolist()
                            }
                            
                            # Faz a requisi√ß√£o de treinamento
                            resultado = fazer_requisicao("/treinar", metodo="POST", dados=dados_treinamento)
                            
                            if resultado:
                                st.success("‚úÖ Modelo treinado com sucesso!")
                                
                                # Mostra estat√≠sticas
                                col1, col2, col3 = st.columns(3)
                                col1.metric("Amostras", resultado["num_amostras"])
                                col2.metric("R¬≤ Score", f"{resultado['r2_score']:.4f}")
                                col3.metric("RMSE", f"{resultado.get('rmse', 0):.2f}")
                                
                                st.balloons()
            
            except Exception as e:
                st.error(f"Erro ao processar o arquivo: {e}")


def pagina_historico():
    """P√°gina para visualizar hist√≥rico de previs√µes e treinamentos"""
    st.title("üìä Hist√≥rico e Estat√≠sticas")
    
    # Abas para diferentes tipos de hist√≥rico
    tab1, tab2 = st.tabs(["Hist√≥rico de Previs√µes", "Hist√≥rico de Treinamentos"])
    
    with tab1:
        st.subheader("Hist√≥rico de Previs√µes")
        
        # Configura√ß√µes de pagina√ß√£o
        limit = st.slider("N√∫mero de previs√µes a exibir", min_value=5, max_value=100, value=20)
        offset = st.number_input("Offset", min_value=0, value=0)
        
        # Bot√£o para atualizar
        if st.button("Atualizar Hist√≥rico de Previs√µes"):
            with st.spinner("Carregando dados..."):
                previsoes = fazer_requisicao("/previsoes", params={"limit": limit, "offset": offset})
                
                if previsoes:
                    if len(previsoes) == 0:
                        st.info("Nenhuma previs√£o encontrada.")
                    else:
                        # Converte para DataFrame para facilitar a visualiza√ß√£o
                        df_previsoes = []
                        for p in previsoes:
                            df_previsoes.append({
                                "ID": p["request_id"][:8],  # Trunca para melhor visualiza√ß√£o
                                "Data": datetime.fromisoformat(p["timestamp"]).strftime("%d/%m/%Y %H:%M"),
                                "√Årea": p["input"]["area"],
                                "Quartos": p["input"].get("quartos", "-"),
                                "Banheiros": p["input"].get("banheiros", "-"),
                                "Idade": p["input"].get("idade_imovel", "-"),
                                "Pre√ßo Previsto": f"R$ {p['preco_previsto']:,.2f}",
                                "Pre√ßo M√≠nimo": f"R$ {p['faixa_confianca'][0]:,.2f}",
                                "Pre√ßo M√°ximo": f"R$ {p['faixa_confianca'][1]:,.2f}"
                            })
                        
                        df = pd.DataFrame(df_previsoes)
                        st.write(df)
                        
                        # Gr√°fico com as √∫ltimas previs√µes
                        st.subheader("√öltimas Previs√µes")
                        
                        # Prepara dados para o gr√°fico
                        for i, p in enumerate(previsoes[:10]):  # Limita a 10 para o gr√°fico
                            previsoes[i]["index"] = i
                        
                        # Cria um gr√°fico com Plotly
                        fig = go.Figure()
                        
                        # Adiciona pontos para cada previs√£o
                        x_values = [p["index"] for p in previsoes[:10]]
                        y_values = [p["preco_previsto"] for p in previsoes[:10]]
                        
                        # Adiciona o tra√ßo principal
                        fig.add_trace(go.Scatter(
                            x=x_values,
                            y=y_values,
                            mode='lines+markers',
                            name='Pre√ßo Previsto',
                            line=dict(color='royalblue', width=3),
                            marker=dict(size=10)
                        ))
                        
                        # Adiciona faixa de confian√ßa
                        y_lower = [p["faixa_confianca"][0] for p in previsoes[:10]]
                        y_upper = [p["faixa_confianca"][1] for p in previsoes[:10]]
                        
                        fig.add_trace(go.Scatter(
                            x=x_values + x_values[::-1],
                            y=y_upper + y_lower[::-1],
                            fill='toself',
                            fillcolor='rgba(0,176,246,0.2)',
                            line=dict(color='rgba(255,255,255,0)'),
                            name='Faixa de Confian√ßa'
                        ))
                        
                        # Configura√ß√µes do layout
                        fig.update_layout(
                            title="Hist√≥rico de Previs√µes Recentes",
                            xaxis_title="√çndice",
                            yaxis_title="Pre√ßo (R$)",
                            legend=dict(
                                x=0.01,
                                y=0.99,
                                traceorder="normal",
                                bgcolor='rgba(255,255,255,0.5)',
                            ),
                            height=500
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
    
    with tab2:
        st.subheader("Hist√≥rico de Treinamentos")
        
        # Configura√ß√µes de pagina√ß√£o
        limit_treino = st.slider("N√∫mero de treinamentos a exibir", min_value=1, max_value=20, value=5)
        offset_treino = st.number_input("Offset para treinamentos", min_value=0, value=0)
        
        # Bot√£o para atualizar
        if st.button("Atualizar Hist√≥rico de Treinamentos"):
            with st.spinner("Carregando dados..."):
                treinamentos = fazer_requisicao("/treinamentos", params={"limit": limit_treino, "offset": offset_treino})
                
                if treinamentos:
                    if len(treinamentos) == 0:
                        st.info("Nenhum treinamento encontrado.")
                    else:
                        # Converte para DataFrame para melhor visualiza√ß√£o
                        df_treinamentos = []
                        for t in treinamentos:
                            df_treinamentos.append({
                                "ID": t["id"],
                                "Data": datetime.fromisoformat(t["timestamp"]).strftime("%d/%m/%Y %H:%M"),
                                "Amostras": t["num_amostras"],
                                "R¬≤": f"{t['r2_score']:.4f}",
                                "RMSE": f"{t.get('rmse', 'N/A'):.2f}" if t.get('rmse') is not None else "N/A",
                                "MAE": f"{t.get('mae', 'N/A'):.2f}" if t.get('mae') is not None else "N/A",
                            })
                        
                        df = pd.DataFrame(df_treinamentos)
                        st.write(df)
                        
                        # Se houver treinamentos, permite selecionar um para detalhes
                        if treinamentos:
                            selected_id = st.selectbox(
                                "Selecione um treinamento para ver detalhes",
                                options=[t["id"] for t in treinamentos],
                                format_func=lambda x: f"Treinamento #{x} - {[t for t in treinamentos if t['id'] == x][0]['timestamp'][:10]}"
                            )
                            
                            # Op√ß√£o para incluir amostras
                            include_samples = st.checkbox("Incluir dados de treinamento")
                            
                            if st.button("Ver Detalhes"):
                                with st.spinner("Carregando detalhes..."):
                                    treinamento = fazer_requisicao(
                                        f"/treinamentos/{selected_id}", 
                                        params={"include_samples": include_samples}
                                    )
                                    
                                    if treinamento:
                                        st.subheader(f"Detalhes do Treinamento #{treinamento['id']}")
                                        
                                        # Informa√ß√µes gerais
                                        col1, col2, col3 = st.columns(3)
                                        col1.metric("R¬≤ Score", f"{treinamento['r2_score']:.4f}")
                                        
                                        if treinamento.get('rmse') is not None:
                                            col2.metric("RMSE", f"{treinamento['rmse']:.2f}")
                                        
                                        if treinamento.get('mae') is not None:
                                            col3.metric("MAE", f"{treinamento['mae']:.2f}")
                                        
                                        # Coeficientes
                                        if "coeficientes" in treinamento:
                                            st.subheader("Coeficientes")
                                            
                                            coefs = treinamento["coeficientes"]
                                            coef_df = pd.DataFrame({
                                                "Feature": list(coefs.keys()),
                                                "Coeficiente": list(coefs.values())
                                            })
                                            
                                            fig = px.bar(
                                                coef_df, 
                                                x="Feature", 
                                                y="Coeficiente",
                                                title="Coeficientes do Modelo",
                                                color="Coeficiente",
                                                color_continuous_scale="RdBu",
                                                height=400
                                            )
                                            st.plotly_chart(fig, use_container_width=True)
                                        
                                        # Dados de treinamento
                                        if include_samples and "dados_treinamento" in treinamento:
                                            st.subheader("Dados de Treinamento")
                                            
                                            # Converte para DataFrame
                                            amostras = treinamento["dados_treinamento"]
                                            df_amostras = pd.DataFrame(amostras)
                                            
                                            # Exibe tabela
                                            st.write(df_amostras)
                                            
                                            # Scatter plot de √°rea x pre√ßo
                                            fig = px.scatter(
                                                df_amostras,
                                                x="area",
                                                y="preco",
                                                title="Rela√ß√£o entre √Årea e Pre√ßo",
                                                labels={"area": "√Årea (m¬≤)", "preco": "Pre√ßo (R$)"},
                                                color_discrete_sequence=["royalblue"],
                                                height=400
                                            )
                                            st.plotly_chart(fig, use_container_width=True)


# Interface principal
def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    # Inicializa o estado da sess√£o
    if "page" not in st.session_state:
        st.session_state.page = "home"
    
    # Sidebar para navega√ß√£o
    with st.sidebar:
        st.title("Navega√ß√£o")
        
        # Menu de navega√ß√£o
        st.radio(
            "Escolha uma p√°gina:",
            options=["Home", "Prever", "Treinar", "Hist√≥rico"],
            key="navigation",
            on_change=lambda: setattr(st.session_state, "page", st.session_state.navigation.lower())
        )
        
        # Informa√ß√µes adicionais
        st.markdown("---")
        st.markdown("### Sobre")
        st.markdown("API de Pre√ßos de Im√≥veis v7.0")
        st.markdown("Desenvolvido com Streamlit e FastAPI")
        st.markdown("¬© 2023")
    
    # Renderiza a p√°gina selecionada
    if st.session_state.page == "home":
        pagina_inicial()
    elif st.session_state.page == "prever":
        pagina_previsao()
    elif st.session_state.page == "treinar":
        pagina_treinamento()
    elif st.session_state.page == "hist√≥rico":
        pagina_historico()


if __name__ == "__main__":
    main() 